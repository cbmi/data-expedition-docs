#!/bin/bash
#
# Wrapper for movedat that adds sensible directory download resume 
# functionality by ignoring already completely downloaded files, resuming 
# interrupted files, and downloading not-yet-downloaded files.
# 
# The wrapper is strictly for downloading, and assumes the last two arguments 
# given are a remote source and a local destination, respectively.
#
# Single files can be downloaded, in addition to directories.
#
# Attempts to use movedat's other capabilities (directory listing, file 
# renaming, uploading to a remote server, etc) through this wrapper will 
# fail spectacularly.
#
# Written by Aaron Browne brownea@email.chop.edu 
# Center for Biomedical Informatics, Children's Hospital of Philadelphia
# Last update on 10/23/13


usage=$(printf "Usage: %s [-l movedat_path] [movedat args]" $0)

# Extract arguments needed for script
numargs=$#

# Exit with usage message if no arguments given
if [[ "${numargs}" == 0 ]]; then
  printf "${usage}\n"
  exit 0
fi

# Assume dest is last argument and src is second to last
dest="${@:numargs:1}"
src="${@:numargs-1:1}"

# Remove trailing slash from destination
dest="${dest%/}"

# Split source into server name (with un) and path
src_path="${src#*:}"
src_serv="${src%:*}"

# Remove trailing slash from source path
src_path="${src_path%/}"

# Will pass the rest to movedat
passargs="${@:1:numargs-2}"

# Remove directory and resume related arguments
passargs="${passargs//-h/}"
passargs="${passargs//-r/}"
passargs="${passargs//-y/}"

# Initialize movedat path to empty string
movedat_path="movedat"
# Find and process the -l option for movedat path
for opt in "${@}"; do
  if [[ "${opt}" == "-l" ]]; then
    # Get movedat path
    movedat_path="${2}"
    # Remove -l and its argument from movedat args
    passargs="${passargs//${2}/}"
    passargs="${passargs//-l/}"
  fi
  shift
done

# Exit if movedat path doesn't lead to an executable movedat binary
if ! command -v "${movedat_path}" >/dev/null 2>&1; then
  printf "Error: ${movedat_path} not found or not executable.\n"
  exit 1
fi

# Try to describe the source using movedat and exit if it fails
src_attr=$(${movedat_path} ${src}=*ls)
if [[ $? != 0 ]]; then printf "Error: Source inspection failed.\n"; exit 2; fi

# Extract the file type from the source description
src_attr_array=( ${src_attr} )
src_type="${src_attr_array[16]}"

# If src is a file, then download it and exit
if [[ "${src_type}" == F* ]]; then
  ${movedat_path} ${passargs} ${src} ${dest}
  exit 0
fi

# If src is a directory, then go into directory download loop
if [[ "${src_type}" == D* ]]; then
  # Allow user to break loop with Ctrl-C
  trap break SIGINT
  
  # Read through structured list
  while read path hex_size mod ftype mode id desc; do
  
    # Create local destination path
    dest_path="${dest}${path#${src_path}}"
  
    # Ignore hidden files
    if [[ "${ftype}" == *h* ]]; then
      continue
    fi
  
    # Create directories locally
    if [[ "${ftype}" == "D" ]]; then
      mkdir -p "${dest_path}"
    fi
  
    # Branching logic for files
    if [[ "${ftype}" == "F" ]]; then
      # Convert source size from hex to dec
      src_dec_size=$(echo "ibase=16; ${hex_size}" | bc)
      # If file exists locally and is the same size, then ignore
      # otherwise, download with the 'yes' option to resume or download new
      if [[ -e "${dest_path}" ]] && 
        [[ $(stat -f %z "${dest_path}") == "${src_dec_size}" ]]; then
        printf "Automatically skipping completed download:\n  %s\n" ${dest_path} 
        continue
      else
        ${movedat_path} -y ${passargs} ${src_serv}:${path} ${dest_path}
      fi
    fi
  done < <(${movedat_path} ${src}=*lr) 
  exit 0
fi


# If src is neither file nor directory, notify user and exit
printf "Warning: Source is neither a regular file nor a directory. "
printf "No action taken.\n"
exit 3
